// Generated by gencpp from file can_test_02/DownToUp.msg
// DO NOT EDIT!


#ifndef CAN_TEST_02_MESSAGE_DOWNTOUP_H
#define CAN_TEST_02_MESSAGE_DOWNTOUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_test_02
{
template <class ContainerAllocator>
struct DownToUp_
{
  typedef DownToUp_<ContainerAllocator> Type;

  DownToUp_()
    : ID(0)
    , TYPE()
    , DATA()  {
    }
  DownToUp_(const ContainerAllocator& _alloc)
    : ID(0)
    , TYPE(_alloc)
    , DATA(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _ID_type;
  _ID_type ID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _TYPE_type;
  _TYPE_type TYPE;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _DATA_type;
  _DATA_type DATA;




  typedef boost::shared_ptr< ::can_test_02::DownToUp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_test_02::DownToUp_<ContainerAllocator> const> ConstPtr;

}; // struct DownToUp_

typedef ::can_test_02::DownToUp_<std::allocator<void> > DownToUp;

typedef boost::shared_ptr< ::can_test_02::DownToUp > DownToUpPtr;
typedef boost::shared_ptr< ::can_test_02::DownToUp const> DownToUpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_test_02::DownToUp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_test_02::DownToUp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace can_test_02

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'can_test_02': ['/home/null/ros_ws/modular_joint_ws_1/src/can_test_02/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::can_test_02::DownToUp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_test_02::DownToUp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_test_02::DownToUp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_test_02::DownToUp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_test_02::DownToUp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_test_02::DownToUp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_test_02::DownToUp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc8c3725a64ab19d079f1f276f8698e8";
  }

  static const char* value(const ::can_test_02::DownToUp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc8c3725a64ab19dULL;
  static const uint64_t static_value2 = 0x079f1f276f8698e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_test_02::DownToUp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_test_02/DownToUp";
  }

  static const char* value(const ::can_test_02::DownToUp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_test_02::DownToUp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ID\n\
string TYPE\n\
float64[] DATA\n\
";
  }

  static const char* value(const ::can_test_02::DownToUp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_test_02::DownToUp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.TYPE);
      stream.next(m.DATA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DownToUp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_test_02::DownToUp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_test_02::DownToUp_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ID);
    s << indent << "TYPE: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.TYPE);
    s << indent << "DATA[]" << std::endl;
    for (size_t i = 0; i < v.DATA.size(); ++i)
    {
      s << indent << "  DATA[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.DATA[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_TEST_02_MESSAGE_DOWNTOUP_H
